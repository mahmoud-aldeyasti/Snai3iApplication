// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Snai3i_DAL.Data.Context;

#nullable disable

namespace Snai3i_DAL.Migrations
{
    [DbContext(typeof(SnaiiDBContext))]
    partial class SnaiiDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationUserTool", b =>
                {
                    b.Property<string>("buyersId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("toolsId")
                        .HasColumnType("int");

                    b.HasKey("buyersId", "toolsId");

                    b.HasIndex("toolsId");

                    b.ToTable("ApplicationUserTool");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "role-admin-id",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "role-superadmin-id",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "role-user-id",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "role-worker-id",
                            Name = "Worker",
                            NormalizedName = "WORKER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier",
                            ClaimValue = "superadmin-id",
                            UserId = "superadmin-id"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "first_name",
                            ClaimValue = "kholoud",
                            UserId = "superadmin-id"
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "SuperAdmin",
                            UserId = "superadmin-id"
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier",
                            ClaimValue = "superadmin-id",
                            UserId = "user1-id"
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "first_name",
                            ClaimValue = "ahmed",
                            UserId = "user1-id"
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "User",
                            UserId = "user1-id"
                        },
                        new
                        {
                            Id = 10,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier",
                            ClaimValue = "superadmin-id",
                            UserId = "user2-id"
                        },
                        new
                        {
                            Id = 11,
                            ClaimType = "first_name",
                            ClaimValue = "sara",
                            UserId = "user2-id"
                        },
                        new
                        {
                            Id = 12,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "User",
                            UserId = "user2-id"
                        },
                        new
                        {
                            Id = 13,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier",
                            ClaimValue = "superadmin-id",
                            UserId = "user3-id"
                        },
                        new
                        {
                            Id = 14,
                            ClaimType = "first_name",
                            ClaimValue = "omar",
                            UserId = "user3-id"
                        },
                        new
                        {
                            Id = 15,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "User",
                            UserId = "user3-id"
                        },
                        new
                        {
                            Id = 16,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier",
                            ClaimValue = "superadmin-id",
                            UserId = "worker1-id"
                        },
                        new
                        {
                            Id = 17,
                            ClaimType = "first_name",
                            ClaimValue = "mustafa",
                            UserId = "worker1-id"
                        },
                        new
                        {
                            Id = 18,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "Worker",
                            UserId = "worker1-id"
                        },
                        new
                        {
                            Id = 19,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier",
                            ClaimValue = "superadmin-id",
                            UserId = "worker2-id"
                        },
                        new
                        {
                            Id = 20,
                            ClaimType = "first_name",
                            ClaimValue = "mohamed",
                            UserId = "worker2-id"
                        },
                        new
                        {
                            Id = 21,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "Worker",
                            UserId = "worker2-id"
                        },
                        new
                        {
                            Id = 22,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier",
                            ClaimValue = "superadmin-id",
                            UserId = "worker3-id"
                        },
                        new
                        {
                            Id = 23,
                            ClaimType = "first_name",
                            ClaimValue = "fatma",
                            UserId = "worker3-id"
                        },
                        new
                        {
                            Id = 24,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "Worker",
                            UserId = "worker3-id"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "superadmin-id",
                            RoleId = "role-superadmin-id"
                        },
                        new
                        {
                            UserId = "user1-id",
                            RoleId = "role-user-id"
                        },
                        new
                        {
                            UserId = "user2-id",
                            RoleId = "role-user-id"
                        },
                        new
                        {
                            UserId = "user3-id",
                            RoleId = "role-user-id"
                        },
                        new
                        {
                            UserId = "worker1-id",
                            RoleId = "role-worker-id"
                        },
                        new
                        {
                            UserId = "worker2-id",
                            RoleId = "role-worker-id"
                        },
                        new
                        {
                            UserId = "worker3-id",
                            RoleId = "role-worker-id"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Snai3i_DAL.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("Isdeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("createdbyId")
                        .HasColumnType("int");

                    b.Property<string>("createdbyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("createddatetime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("deletedbyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("deleteddatetime")
                        .HasColumnType("datetime2");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("modifiedDatetime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("modifiedbyId")
                        .HasColumnType("int");

                    b.Property<string>("modifiedbyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUser");

                    b.HasDiscriminator<int>("type").HasValue(0);

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = "superadmin-id",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d995eb30-44cb-434d-b949-be6b5b9ce7a7",
                            Email = "kholoud@sani3i.com",
                            EmailConfirmed = true,
                            Isdeleted = false,
                            LastName = "Salama",
                            LockoutEnabled = false,
                            NormalizedEmail = "KHOLOUD@SANI3I.COM",
                            NormalizedUserName = "KHOLOUD",
                            PasswordHash = "AQAAAAIAAYagAAAAELf86GAF+ciEweF4lLoTVw563Oezd1D6WXNGEh+j9UcgY/I63eNfG4JvzJNUVXJ3ZQ==",
                            PhoneNumber = "0100000000",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "820172fc-60e8-4ed6-b2f2-4966226b8b5c",
                            TwoFactorEnabled = false,
                            UserName = "kholoud",
                            image = "Khouloud.png",
                            type = 0
                        });
                });

            modelBuilder.Entity("Snai3i_DAL.Data.Models.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BuyerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Isdeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SaleId")
                        .HasColumnType("int");

                    b.Property<int>("SizeId")
                        .HasColumnType("int");

                    b.Property<int>("ToolId")
                        .HasColumnType("int");

                    b.Property<string>("createdbyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("createdbyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("createddatetime")
                        .HasColumnType("datetime2");

                    b.Property<string>("deletedbyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("deleteddatetime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("modifiedDatetime")
                        .HasColumnType("datetime2");

                    b.Property<string>("modifiedbyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("modifiedbyName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("SizeId");

                    b.HasIndex("ToolId");

                    b.ToTable("cards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BuyerId = "user1-id",
                            Isdeleted = false,
                            Quantity = 2,
                            SaleId = 1,
                            SizeId = 1,
                            ToolId = 1
                        },
                        new
                        {
                            Id = 2,
                            BuyerId = "user2-id",
                            Isdeleted = false,
                            Quantity = 3,
                            SaleId = 2,
                            SizeId = 2,
                            ToolId = 2
                        },
                        new
                        {
                            Id = 3,
                            BuyerId = "user2-id",
                            Isdeleted = false,
                            Quantity = 5,
                            SaleId = 3,
                            SizeId = 3,
                            ToolId = 3
                        });
                });

            modelBuilder.Entity("Snai3i_DAL.Data.Models.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Isdeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("createdbyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("createdbyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("createddatetime")
                        .HasColumnType("datetime2");

                    b.Property<string>("deletedbyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("deleteddatetime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("modifiedDatetime")
                        .HasColumnType("datetime2");

                    b.Property<string>("modifiedbyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("modifiedbyName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("chats");
                });

            modelBuilder.Entity("Snai3i_DAL.Data.Models.Craft", b =>
                {
                    b.Property<int>("CraftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CraftId"));

                    b.Property<string>("CraftName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Isdeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("createdbyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("createdbyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("createddatetime")
                        .HasColumnType("datetime2");

                    b.Property<string>("deletedbyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("deleteddatetime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("modifiedDatetime")
                        .HasColumnType("datetime2");

                    b.Property<string>("modifiedbyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("modifiedbyName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CraftId");

                    b.ToTable("crafts");

                    b.HasData(
                        new
                        {
                            CraftId = 1,
                            CraftName = "Plumbing",
                            Isdeleted = false
                        },
                        new
                        {
                            CraftId = 2,
                            CraftName = "Electrical",
                            Isdeleted = false
                        },
                        new
                        {
                            CraftId = 3,
                            CraftName = "Carpentry",
                            Isdeleted = false
                        });
                });

            modelBuilder.Entity("Snai3i_DAL.Data.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Commision")
                        .HasColumnType("float");

                    b.Property<DateTime>("ConfirmDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ForwardDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Isdeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.Property<string>("WorkerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("createdbyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("createdbyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("createddatetime")
                        .HasColumnType("datetime2");

                    b.Property<string>("deletedbyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("deleteddatetime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("modifiedDatetime")
                        .HasColumnType("datetime2");

                    b.Property<string>("modifiedbyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("modifiedbyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("reviewId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkerId");

                    b.ToTable("orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Commision = 10.0,
                            ConfirmDate = new DateTime(2023, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ForwardDate = new DateTime(2023, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Isdeleted = false,
                            UserId = "user1-id",
                            Value = 1500.5,
                            WorkerId = "worker1-id",
                            reviewId = 1
                        },
                        new
                        {
                            Id = 2,
                            Commision = 8.0,
                            ConfirmDate = new DateTime(2023, 12, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ForwardDate = new DateTime(2023, 12, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Isdeleted = false,
                            UserId = "user2-id",
                            Value = 800.75,
                            WorkerId = "worker2-id",
                            reviewId = 2
                        },
                        new
                        {
                            Id = 3,
                            Commision = 9.5,
                            ConfirmDate = new DateTime(2023, 12, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ForwardDate = new DateTime(2023, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Isdeleted = false,
                            UserId = "user3-id",
                            Value = 1000.25,
                            WorkerId = "worker3-id",
                            reviewId = 3
                        },
                        new
                        {
                            Id = 4,
                            Commision = 9.5,
                            ConfirmDate = new DateTime(2023, 12, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ForwardDate = new DateTime(2023, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Isdeleted = false,
                            UserId = "user1-id",
                            Value = 1000.25,
                            WorkerId = "worker3-id",
                            reviewId = 0
                        });
                });

            modelBuilder.Entity("Snai3i_DAL.Data.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Isdeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<float>("Rate")
                        .HasColumnType("real");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WorkerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("createdbyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("createdbyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("createddatetime")
                        .HasColumnType("datetime2");

                    b.Property<string>("deletedbyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("deleteddatetime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("modifiedDatetime")
                        .HasColumnType("datetime2");

                    b.Property<string>("modifiedbyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("modifiedbyName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.HasIndex("WorkerId");

                    b.ToTable("reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Great service, very satisfied!",
                            Isdeleted = false,
                            OrderId = 1,
                            Rate = 4.5f,
                            UserId = "user1-id",
                            WorkerId = "worker1-id"
                        },
                        new
                        {
                            Id = 2,
                            Comment = "Good job, but a bit delayed.",
                            Isdeleted = false,
                            OrderId = 2,
                            Rate = 4f,
                            UserId = "user2-id",
                            WorkerId = "worker2-id"
                        },
                        new
                        {
                            Id = 3,
                            Comment = "Excellent service, highly recommended!",
                            Isdeleted = false,
                            OrderId = 3,
                            Rate = 5f,
                            UserId = "user3-id",
                            WorkerId = "worker3-id"
                        });
                });

            modelBuilder.Entity("Snai3i_DAL.Data.Models.Sales", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Isdeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("OrderState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("createdbyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("createdbyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("createddatetime")
                        .HasColumnType("datetime2");

                    b.Property<string>("deletedbyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("deleteddatetime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("modifiedDatetime")
                        .HasColumnType("datetime2");

                    b.Property<string>("modifiedbyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("modifiedbyName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CardId")
                        .IsUnique();

                    b.ToTable("sales");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Main St, Cairo",
                            CardId = 1,
                            Date = new DateTime(2023, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryState = "Delivered",
                            Isdeleted = false,
                            OrderState = "Completed"
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Elm St, Alexandria",
                            CardId = 2,
                            Date = new DateTime(2023, 12, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryState = "Pending",
                            Isdeleted = false,
                            OrderState = "Processing"
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 Oak St, Giza",
                            CardId = 3,
                            Date = new DateTime(2023, 12, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryState = "Shipped",
                            Isdeleted = false,
                            OrderState = "Shipped"
                        });
                });

            modelBuilder.Entity("Snai3i_DAL.Data.Models.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Isdeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<int>("ToolId")
                        .HasColumnType("int");

                    b.Property<double>("ToolSize")
                        .HasColumnType("float");

                    b.Property<string>("createdbyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("createdbyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("createddatetime")
                        .HasColumnType("datetime2");

                    b.Property<string>("deletedbyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("deleteddatetime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("modifiedDatetime")
                        .HasColumnType("datetime2");

                    b.Property<string>("modifiedbyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("modifiedbyName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ToolId");

                    b.ToTable("sizes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Isdeleted = false,
                            Price = 100.0,
                            Stock = 20,
                            ToolId = 2,
                            ToolSize = 10.5
                        },
                        new
                        {
                            Id = 2,
                            Isdeleted = false,
                            Price = 150.0,
                            Stock = 15,
                            ToolId = 3,
                            ToolSize = 12.5
                        },
                        new
                        {
                            Id = 3,
                            Isdeleted = false,
                            Price = 200.0,
                            Stock = 10,
                            ToolId = 3,
                            ToolSize = 15.0
                        });
                });

            modelBuilder.Entity("Snai3i_DAL.Data.Models.Tool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Isdeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("createdbyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("createdbyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("createddatetime")
                        .HasColumnType("datetime2");

                    b.Property<string>("deletedbyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("deleteddatetime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("modifiedDatetime")
                        .HasColumnType("datetime2");

                    b.Property<string>("modifiedbyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("modifiedbyName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tools");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Heavy-duty hammer",
                            Image = "hammer.png",
                            Isdeleted = false,
                            Name = "Hammer"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Multi-purpose screwdriver",
                            Image = "screwdriver.png",
                            Isdeleted = false,
                            Name = "Screwdriver"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Adjustable wrench",
                            Image = "wrench.png",
                            Isdeleted = false,
                            Name = "Wrench"
                        });
                });

            modelBuilder.Entity("UserWorker", b =>
                {
                    b.Property<string>("usersId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("workersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("usersId", "workersId");

                    b.HasIndex("workersId");

                    b.ToTable("UserWorker");
                });

            modelBuilder.Entity("Snai3i_DAL.Data.Models.User", b =>
                {
                    b.HasBaseType("Snai3i_DAL.Data.Models.ApplicationUser");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.HasDiscriminator().HasValue(2);

                    b.HasData(
                        new
                        {
                            Id = "user1-id",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "50331dcb-d483-431f-87c9-1585f66a4138",
                            Email = "ahmed@example.com",
                            EmailConfirmed = true,
                            Isdeleted = false,
                            LastName = "Ragab",
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMED@EXAMPLE.COM",
                            NormalizedUserName = "AHMED",
                            PasswordHash = "AQAAAAIAAYagAAAAEEfjsN85CgBCljuWNqchx4ore2OkyTa7JfU6i+kR9pVu23B+R9uS8MwkkK5VnLN25w==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "27d79bd1-54d4-479d-98d4-c8faa6b1d52e",
                            TwoFactorEnabled = false,
                            UserName = "ahmed",
                            image = "ahmed.png",
                            type = 0,
                            Latitude = 31.235700000000001,
                            Longitude = 30.0444
                        },
                        new
                        {
                            Id = "user2-id",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "46c3cf47-e2ad-4e08-9440-3024891a41b0",
                            Email = "sara@example.com",
                            EmailConfirmed = true,
                            Isdeleted = false,
                            LastName = "elalfy",
                            LockoutEnabled = false,
                            NormalizedEmail = "SARA@EXAMPLE.COM",
                            NormalizedUserName = "SARA",
                            PasswordHash = "AQAAAAIAAYagAAAAEM1YEOND28CBIbsGCgZwMIWzQ4RmKagiwDIII2vKXlJzlMl4ypio4bVv4XN3rLLJKg==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "aac8173b-b63c-4580-9acd-84968e45b76e",
                            TwoFactorEnabled = false,
                            UserName = "sara",
                            image = "Sara.png",
                            type = 0,
                            Latitude = 31.1325,
                            Longitude = 29.9773
                        },
                        new
                        {
                            Id = "user3-id",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d2cd5823-d1fd-4439-b8ef-cf59e0518054",
                            Email = "omar@example.com",
                            EmailConfirmed = true,
                            Isdeleted = false,
                            LastName = "hamada",
                            LockoutEnabled = false,
                            NormalizedEmail = "OMAR@EXAMPLE.COM",
                            NormalizedUserName = "OMAR",
                            PasswordHash = "AQAAAAIAAYagAAAAEOetvA2JpESVcAWbipY3KvaXVbLMXwvtSH+23K0OMD8ifZT6UdqO1tOYGTkxyKDc1A==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "0ca05898-3613-4fa1-a32b-3fd9c715bff7",
                            TwoFactorEnabled = false,
                            UserName = "omar",
                            image = "Omar.png",
                            type = 0,
                            Latitude = 30.8141,
                            Longitude = 29.8264
                        });
                });

            modelBuilder.Entity("Snai3i_DAL.Data.Models.Worker", b =>
                {
                    b.HasBaseType("Snai3i_DAL.Data.Models.ApplicationUser");

                    b.Property<int?>("CraftId")
                        .HasColumnType("int");

                    b.Property<string>("Governorate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Nationalnumber")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfOperation")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartingDate")
                        .HasColumnType("datetime2");

                    b.HasIndex("CraftId");

                    b.HasDiscriminator().HasValue(3);

                    b.HasData(
                        new
                        {
                            Id = "worker1-id",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1f0ac02b-78b8-476d-a56e-b41aff5a482b",
                            Email = "mustafa@example.com",
                            EmailConfirmed = true,
                            Isdeleted = false,
                            LastName = "hamed",
                            LockoutEnabled = false,
                            NormalizedEmail = "MUSTAFA@EXAMPLE.COM",
                            NormalizedUserName = "MUSTAFA",
                            PasswordHash = "AQAAAAIAAYagAAAAEB+X4da+wQiH32tJpnHB9fYu8AOg7RHDJ/zr9fDBN/ktoEeArdgqW96sdU1IYNo+Cw==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "90819def-0eee-40af-b218-59c26a0b869d",
                            TwoFactorEnabled = false,
                            UserName = "mustafa",
                            image = "Mustafa.png",
                            type = 0,
                            CraftId = 1,
                            Governorate = "Cairo",
                            Nationalnumber = 123456789,
                            NumberOfOperation = 10,
                            StartingDate = new DateTime(2020, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "worker2-id",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0c84334e-d165-45e3-bf43-c093674ca728",
                            Email = "mohamed@example.com",
                            EmailConfirmed = true,
                            Isdeleted = false,
                            LastName = "yousry",
                            LockoutEnabled = false,
                            NormalizedEmail = "MOHAMED@EXAMPLE.COM",
                            NormalizedUserName = "MOHAMED",
                            PasswordHash = "AQAAAAIAAYagAAAAEFgq7CSAWG+qtQJ1ybNKaTK9gbKshzcNkfEUHG0cfSjJ6Htl5xHiiCQlGw8lBhqvuQ==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "273506aa-3d13-43a6-a733-ca45943d43a6",
                            TwoFactorEnabled = false,
                            UserName = "mohamed",
                            image = "Mohamed.png",
                            type = 0,
                            CraftId = 1,
                            Governorate = "Alexandria",
                            Nationalnumber = 987654321,
                            NumberOfOperation = 20,
                            StartingDate = new DateTime(2021, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "worker3-id",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5bdb05d0-a028-4313-9051-37edc35062e7",
                            Email = "fatma@example.com",
                            EmailConfirmed = true,
                            Isdeleted = false,
                            LastName = "yassin",
                            LockoutEnabled = false,
                            NormalizedEmail = "FATMA@EXAMPLE.COM",
                            NormalizedUserName = "FATMA",
                            PasswordHash = "AQAAAAIAAYagAAAAEE7qQe10MmsYGmNZx8wg8/ZlMAu+V2BXXyBWvi1szG0/mkpd6i3be9UnhrlcRI847Q==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "5b56a46c-459f-4c47-93fc-9bf349f6ba50",
                            TwoFactorEnabled = false,
                            UserName = "fatma",
                            image = "Fatma.png",
                            type = 0,
                            CraftId = 2,
                            Governorate = "Giza",
                            Nationalnumber = 1122334455,
                            NumberOfOperation = 15,
                            StartingDate = new DateTime(2019, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ApplicationUserTool", b =>
                {
                    b.HasOne("Snai3i_DAL.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("buyersId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Snai3i_DAL.Data.Models.Tool", null)
                        .WithMany()
                        .HasForeignKey("toolsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Snai3i_DAL.Data.Models.Card", b =>
                {
                    b.HasOne("Snai3i_DAL.Data.Models.ApplicationUser", "buyer")
                        .WithMany("cards")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Snai3i_DAL.Data.Models.Size", "size")
                        .WithMany("cards")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Snai3i_DAL.Data.Models.Tool", "tool")
                        .WithMany("cards")
                        .HasForeignKey("ToolId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("buyer");

                    b.Navigation("size");

                    b.Navigation("tool");
                });

            modelBuilder.Entity("Snai3i_DAL.Data.Models.Chat", b =>
                {
                    b.HasOne("Snai3i_DAL.Data.Models.ApplicationUser", "receiver")
                        .WithMany("ReceivedChats")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Snai3i_DAL.Data.Models.ApplicationUser", "sender")
                        .WithMany("SentChats")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("receiver");

                    b.Navigation("sender");
                });

            modelBuilder.Entity("Snai3i_DAL.Data.Models.Order", b =>
                {
                    b.HasOne("Snai3i_DAL.Data.Models.User", "user")
                        .WithMany("orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Snai3i_DAL.Data.Models.Worker", "worker")
                        .WithMany("orders")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("user");

                    b.Navigation("worker");
                });

            modelBuilder.Entity("Snai3i_DAL.Data.Models.Review", b =>
                {
                    b.HasOne("Snai3i_DAL.Data.Models.Order", "order")
                        .WithOne("review")
                        .HasForeignKey("Snai3i_DAL.Data.Models.Review", "OrderId")
                        .HasPrincipalKey("Snai3i_DAL.Data.Models.Order", "reviewId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Snai3i_DAL.Data.Models.User", "user")
                        .WithMany("reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Snai3i_DAL.Data.Models.Worker", "worker")
                        .WithMany("reviews")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("order");

                    b.Navigation("user");

                    b.Navigation("worker");
                });

            modelBuilder.Entity("Snai3i_DAL.Data.Models.Sales", b =>
                {
                    b.HasOne("Snai3i_DAL.Data.Models.Card", "card")
                        .WithOne("Sale")
                        .HasForeignKey("Snai3i_DAL.Data.Models.Sales", "CardId")
                        .HasPrincipalKey("Snai3i_DAL.Data.Models.Card", "SaleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("card");
                });

            modelBuilder.Entity("Snai3i_DAL.Data.Models.Size", b =>
                {
                    b.HasOne("Snai3i_DAL.Data.Models.Tool", "tool")
                        .WithMany("sizes")
                        .HasForeignKey("ToolId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("tool");
                });

            modelBuilder.Entity("UserWorker", b =>
                {
                    b.HasOne("Snai3i_DAL.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("usersId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Snai3i_DAL.Data.Models.Worker", null)
                        .WithMany()
                        .HasForeignKey("workersId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Snai3i_DAL.Data.Models.Worker", b =>
                {
                    b.HasOne("Snai3i_DAL.Data.Models.Craft", "craft")
                        .WithMany("workers")
                        .HasForeignKey("CraftId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("craft");
                });

            modelBuilder.Entity("Snai3i_DAL.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("ReceivedChats");

                    b.Navigation("SentChats");

                    b.Navigation("cards");
                });

            modelBuilder.Entity("Snai3i_DAL.Data.Models.Card", b =>
                {
                    b.Navigation("Sale");
                });

            modelBuilder.Entity("Snai3i_DAL.Data.Models.Craft", b =>
                {
                    b.Navigation("workers");
                });

            modelBuilder.Entity("Snai3i_DAL.Data.Models.Order", b =>
                {
                    b.Navigation("review");
                });

            modelBuilder.Entity("Snai3i_DAL.Data.Models.Size", b =>
                {
                    b.Navigation("cards");
                });

            modelBuilder.Entity("Snai3i_DAL.Data.Models.Tool", b =>
                {
                    b.Navigation("cards");

                    b.Navigation("sizes");
                });

            modelBuilder.Entity("Snai3i_DAL.Data.Models.User", b =>
                {
                    b.Navigation("orders");

                    b.Navigation("reviews");
                });

            modelBuilder.Entity("Snai3i_DAL.Data.Models.Worker", b =>
                {
                    b.Navigation("orders");

                    b.Navigation("reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
